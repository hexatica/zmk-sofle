#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <2000>;
    acceleration-exponent = <1>;
    trigger-period-ms = <15>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7  &kp N8     &kp N9   &kp N0        &kp BACKSPACE
&kp TAB           &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U   &kp I      &kp O    &kp P         &kp RIGHT_BRACKET
&mo 2             &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J   &kp K      &kp L    &kp EQUAL     &kp APOS
&kp LSHFT         &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH      &kp RIGHT_SHIFT
&kp LC(UP_ARROW)  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &mo 1   &kp SPACE    &kp ENTER        &kp SPACE  &mo 1   &kp ENTER  &mo 2    &kp LEFT_GUI
            >;

            sensor-bindings = <&inc_dec_kp LC(LEFT_ARROW) LC(RIGHT_ARROW)>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp BACKSLASH  &kp F1            &kp F2            &kp F3          &kp F4          &kp F5       &mmv MOVE_UP     &kp F6     &kp F7    &kp F8      &kp F9     &kp F10    &kp DELETE
&kp SEMICOLON  &kp GRAVE         &kp LS(GRAVE)     &kp LS(N8)      &kp LS(N9)      &kp COMMA    &mmv MOVE_DOWN   &kp PG_UP  &kp HOME  &kp UP      &kp END    &kp MINUS  &kp EQUAL
&trans         &kp LS(NUMBER_6)  &kp LS(NUMBER_0)  &kp LA(N8)      &kp LA(N9)      &kp DOT      &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT  &kp DOWN    &kp RIGHT  &trans     &trans
&trans         &kp BACKSPACE     &kp DELETE        &kp LS(LA(N8))  &kp LS(LA(N9))  &kp RET      &mmv MOVE_RIGHT  &trans     &trans    &kp INSERT  &kp F11    &kp F12    &trans
&kp C_PP       &trans            &trans            &trans          &trans          &trans       &mkp LCLK        &trans     &trans    &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>;
        };

        layer_2 {
            bindings = <
&kp TILDE       &kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3     &kp NUMBER_4  &kp NUMBER_5    &rgb_ug RGB_BRI  &kp F6        &kp F7        &kp F8      &kp F9     &kp F10      &trans
&trans          &kp NUMBER_6    &kp NUMBER_7    &kp NUMBER_8     &kp NUMBER_9  &kp NUMBER_0    &rgb_ug RGB_BRD  &bt BT_CLR    &trans        &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans          &kp LS(TAB)     &kp UP_ARROW    &kp TAB          &kp LC(R)     &bt BT_NXT      &rgb_ug RGB_HUI  &out OUT_USB  &out OUT_BLE  &trans      &trans     &kp LBRC     &kp RBRC
&trans          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(D)     &bt BT_PRV      &rgb_ug RGB_EFF  &trans        &trans        &sys_reset  &soft_off  &bootloader  &trans
&bt BT_CLR_ALL  &trans          &trans          &trans           &trans        &trans          &rgb_ug RGB_TOG  &trans        &trans        &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
